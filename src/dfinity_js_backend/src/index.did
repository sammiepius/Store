service: () -> {
    addShoe: (record {name:text; size:text; description:text; shoeURL:text; price:nat64; location:text}) -> (variant {Ok:record {id:text; soldAmount:nat64; like:int8; name:text; size:text; description:text; seller:principal; shoeURL:text; liked:vec text; comments:vec text; price:nat64; location:text}; Err:variant {AlreadyLiked:text; PaymentFailed:text; InvalidPayload:text; NotFound:text; NotOwner:text; Owner:text; PaymentCompleted:text}});
    completePurchase: (principal, text, nat64, nat64, nat64) -> (variant {Ok:record {status:variant {PaymentPending:text; Completed:text}; shoeId:text; memo:nat64; seller:principal; price:nat64; paid_at_block:opt nat64}; Err:variant {AlreadyLiked:text; PaymentFailed:text; InvalidPayload:text; NotFound:text; NotOwner:text; Owner:text; PaymentCompleted:text}});
    createOrder: (text) -> (variant {Ok:record {status:variant {PaymentPending:text; Completed:text}; shoeId:text; memo:nat64; seller:principal; price:nat64; paid_at_block:opt nat64}; Err:variant {AlreadyLiked:text; PaymentFailed:text; InvalidPayload:text; NotFound:text; NotOwner:text; Owner:text; PaymentCompleted:text}});
    deleteShoeById: (text) -> (variant {Ok:text; Err:variant {AlreadyLiked:text; PaymentFailed:text; InvalidPayload:text; NotFound:text; NotOwner:text; Owner:text; PaymentCompleted:text}});
    getComments: (text) -> (variant {Ok:vec text; Err:variant {AlreadyLiked:text; PaymentFailed:text; InvalidPayload:text; NotFound:text; NotOwner:text; Owner:text; PaymentCompleted:text}}) query;
    getNoOfShoes: () -> (int32) query;
    getOrders: () -> (vec record {status:variant {PaymentPending:text; Completed:text}; shoeId:text; memo:nat64; seller:principal; price:nat64; paid_at_block:opt nat64}) query;
    getPendingOrders: () -> (vec record {status:variant {PaymentPending:text; Completed:text}; shoeId:text; memo:nat64; seller:principal; price:nat64; paid_at_block:opt nat64}) query;
    getShoe: (text) -> (variant {Ok:record {id:text; soldAmount:nat64; like:int8; name:text; size:text; description:text; seller:principal; shoeURL:text; liked:vec text; comments:vec text; price:nat64; location:text}; Err:variant {AlreadyLiked:text; PaymentFailed:text; InvalidPayload:text; NotFound:text; NotOwner:text; Owner:text; PaymentCompleted:text}}) query;
    getShoes: () -> (vec record {id:text; soldAmount:nat64; like:int8; name:text; size:text; description:text; seller:principal; shoeURL:text; liked:vec text; comments:vec text; price:nat64; location:text}) query;
    insertComment: (text, text) -> (variant {Ok:vec text; Err:variant {AlreadyLiked:text; PaymentFailed:text; InvalidPayload:text; NotFound:text; NotOwner:text; Owner:text; PaymentCompleted:text}});
    likeShoe: (text) -> (variant {Ok:record {id:text; soldAmount:nat64; like:int8; name:text; size:text; description:text; seller:principal; shoeURL:text; liked:vec text; comments:vec text; price:nat64; location:text}; Err:variant {AlreadyLiked:text; PaymentFailed:text; InvalidPayload:text; NotFound:text; NotOwner:text; Owner:text; PaymentCompleted:text}});
    makePayment: (text, nat64) -> (variant {Ok:variant {AlreadyLiked:text; PaymentFailed:text; InvalidPayload:text; NotFound:text; NotOwner:text; Owner:text; PaymentCompleted:text}; Err:variant {AlreadyLiked:text; PaymentFailed:text; InvalidPayload:text; NotFound:text; NotOwner:text; Owner:text; PaymentCompleted:text}});
    searchShoe: (text) -> (vec record {id:text; soldAmount:nat64; like:int8; name:text; size:text; description:text; seller:principal; shoeURL:text; liked:vec text; comments:vec text; price:nat64; location:text}) query;
    updateShoe: (text, record {name:text; size:text; description:text; shoeURL:text; price:nat64; location:text}) -> (variant {Ok:record {id:text; soldAmount:nat64; like:int8; name:text; size:text; description:text; seller:principal; shoeURL:text; liked:vec text; comments:vec text; price:nat64; location:text}; Err:variant {AlreadyLiked:text; PaymentFailed:text; InvalidPayload:text; NotFound:text; NotOwner:text; Owner:text; PaymentCompleted:text}});
    verifyPayment: (principal, nat64, nat64, nat64) -> (bool) query;
}
